"""
Service Vulnerability Checker
Checks known vulnerabilities for detected services
"""

import logging
from typing import Dict, List, Any
from .cve_scanner import scan_for_cves

logger = logging.getLogger(__name__)

# Common service version patterns and their software names
SERVICE_MAPPINGS = {
    "ssh": "openssh",
    "http": "apache",
    "https": "apache",
    "ftp": "vsftpd",
    "smtp": "postfix",
    "mysql": "mysql",
    "postgresql": "postgresql",
    "mongodb": "mongodb",
    "redis": "redis",
    "nginx": "nginx",
    "tomcat": "apache tomcat",
    "iis": "microsoft iis"
}


def check_service_vulnerabilities(service_info: Dict[str, Any]) -> Dict[str, Any]:
    """
    Check for vulnerabilities in detected services
    
    Args:
        service_info: Dictionary with service details
                     Example: {"port": 80, "service": "http", "version": "Apache 2.4.41"}
        
    Returns:
        Dictionary with vulnerability results
    """
    results = {
        "port": service_info.get("port"),
        "service": service_info.get("service"),
        "version": service_info.get("version"),
        "vulnerabilities": []
    }
    
    try:
        service_name = service_info.get("service", "").lower()
        version_string = service_info.get("version", "")
        
        # Skip scanning for unknown services
        if service_name == "unknown" or not service_name:
            logger.debug(f"Skipping vulnerability scan for unknown service on port {service_info.get('port')}")
            results["skipped"] = True
            results["reason"] = "Unknown service - skipping CVE scan"
            return results
        
        # Extract software name
        software = SERVICE_MAPPINGS.get(service_name, service_name)
        
        # Try to parse version from version string
        version = None
        if version_string:
            # Simple version extraction (can be improved)
            parts = version_string.split()
            for part in parts:
                if any(char.isdigit() for char in part):
                    version = part.replace(",", "").replace("(", "").replace(")", "")
                    break
        
        logger.info(f"Checking vulnerabilities for {software} {version if version else ''}")
        
        # Scan for CVEs
        cve_results = scan_for_cves(software, version)
        results["vulnerabilities"] = cve_results.get("cves", [])
        results["total_cves"] = cve_results.get("total_found", 0)
        results["critical_count"] = cve_results.get("critical_count", 0)
        results["high_count"] = cve_results.get("high_count", 0)
        
        if "error" in cve_results:
            results["error"] = cve_results["error"]
            
    except Exception as e:
        results["error"] = f"Error checking service vulnerabilities: {str(e)}"
        logger.error(f"Service vulnerability check error: {e}")
    
    return results


def batch_check_services(services: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    Check vulnerabilities for multiple services
    
    Args:
        services: List of service dictionaries
        
    Returns:
        List of vulnerability check results
    """
    results = []
    skipped_count = 0
    scanned_count = 0
    
    for service in services:
        result = check_service_vulnerabilities(service)
        
        if result.get("skipped"):
            skipped_count += 1
            # Don't add skipped services to results
            continue
        else:
            scanned_count += 1
            results.append(result)
            # Add small delay to avoid rate limiting (only for actual scans)
            import time
            time.sleep(1)
    
    logger.info(f"Vulnerability scan complete: {scanned_count} services scanned, {skipped_count} unknown services skipped")
    
    return results
