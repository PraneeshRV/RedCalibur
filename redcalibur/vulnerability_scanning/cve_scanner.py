"""
CVE Scanner - Scan for Common Vulnerabilities and Exposures
Uses NVD (National Vulnerability Database) API
"""

import requests
import time
import logging
from typing import Dict, List, Any

logger = logging.getLogger(__name__)


def scan_for_cves(software: str, version: str = None) -> Dict[str, Any]:
    """
    Search for CVEs related to specific software/service
    
    Args:
        software: Software name (e.g., 'apache', 'nginx', 'openssh')
        version: Specific version if known
        
    Returns:
        Dictionary containing CVE information
    """
    results = {
        "software": software,
        "version": version,
        "cves": [],
        "total_found": 0,
        "critical_count": 0,
        "high_count": 0,
        "medium_count": 0,
        "low_count": 0
    }
    
    try:
        # NVD API v2.0 endpoint
        base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        
        # Construct search keyword
        keyword = f"{software}"
        if version:
            keyword = f"{software} {version}"
        
        params = {
            "keywordSearch": keyword,
            "resultsPerPage": 20  # Limit to avoid rate limiting
        }
        
        logger.info(f"Searching NVD for: {keyword}")
        
        # Make request with proper headers
        headers = {
            "User-Agent": "RedCalibur-Security-Tool/1.0"
        }
        
        response = requests.get(base_url, params=params, headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            
            if "vulnerabilities" in data:
                for vuln_item in data.get("vulnerabilities", []):
                    cve_data = vuln_item.get("cve", {})
                    cve_id = cve_data.get("id", "N/A")
                    
                    # Extract description
                    descriptions = cve_data.get("descriptions", [])
                    description = descriptions[0].get("value", "No description") if descriptions else "No description"
                    
                    # Extract CVSS score and severity
                    metrics = cve_data.get("metrics", {})
                    cvss_score = "N/A"
                    severity = "UNKNOWN"
                    
                    # Try CVSS v3.1 first, then v3.0, then v2.0
                    for cvss_version in ["cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
                        if cvss_version in metrics and metrics[cvss_version]:
                            cvss_data = metrics[cvss_version][0].get("cvssData", {})
                            cvss_score = cvss_data.get("baseScore", "N/A")
                            severity = cvss_data.get("baseSeverity", "UNKNOWN")
                            break
                    
                    # Published date
                    published = cve_data.get("published", "N/A")
                    
                    cve_info = {
                        "cve_id": cve_id,
                        "description": description[:200] + "..." if len(description) > 200 else description,
                        "cvss_score": cvss_score,
                        "severity": severity,
                        "published": published,
                        "url": f"https://nvd.nist.gov/vuln/detail/{cve_id}"
                    }
                    
                    results["cves"].append(cve_info)
                    
                    # Count by severity
                    if severity == "CRITICAL":
                        results["critical_count"] += 1
                    elif severity == "HIGH":
                        results["high_count"] += 1
                    elif severity == "MEDIUM":
                        results["medium_count"] += 1
                    elif severity == "LOW":
                        results["low_count"] += 1
                
                results["total_found"] = len(results["cves"])
                if results["total_found"] > 0:
                    logger.info(f"Found {results['total_found']} CVEs for {keyword}")
                else:
                    logger.debug(f"No CVEs found for {keyword}")
            else:
                logger.debug("No vulnerabilities found in NVD response")
                
        elif response.status_code == 403:
            results["error"] = "NVD API access forbidden - rate limit may be exceeded"
            logger.error("NVD API rate limit exceeded")
        else:
            results["error"] = f"NVD API returned status code: {response.status_code}"
            logger.error(f"NVD API error: {response.status_code}")
            
    except requests.exceptions.Timeout:
        results["error"] = "Request to NVD API timed out"
        logger.error("NVD API timeout")
    except requests.exceptions.RequestException as e:
        results["error"] = f"Request error: {str(e)}"
        logger.error(f"NVD API request error: {e}")
    except Exception as e:
        results["error"] = f"Unexpected error: {str(e)}"
        logger.error(f"Unexpected error in CVE scan: {e}")
    
    return results


def search_cve_by_id(cve_id: str) -> Dict[str, Any]:
    """
    Get detailed information about a specific CVE
    
    Args:
        cve_id: CVE ID (e.g., 'CVE-2021-44228')
        
    Returns:
        Dictionary with CVE details
    """
    try:
        base_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0"
        params = {"cveId": cve_id}
        
        headers = {
            "User-Agent": "RedCalibur-Security-Tool/1.0"
        }
        
        response = requests.get(base_url, params=params, headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            return {"error": f"Failed to retrieve CVE {cve_id}"}
            
    except Exception as e:
        return {"error": str(e)}
