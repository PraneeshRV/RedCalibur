import subprocess
import logging

logger = logging.getLogger(__name__)

def perform_vulnerability_scan(ip_address: str) -> dict:
    """
    Performs a vulnerability scan on the given IP address using nmap.

    Args:
        ip_address (str): The IP address to scan.

    Returns:
        dict: A dictionary containing the vulnerability scan results.
    """
    results = {"target": ip_address, "findings": []}
    logger.info(f"Starting vulnerability scan for {ip_address}...")

    try:
        # Run nmap with the 'vuln' script category
        command = ["nmap", "-sV", "--script", "vuln", ip_address]
        process = subprocess.run(command, capture_output=True, text=True, timeout=600)

        if process.returncode == 0:
            results["raw_output"] = process.stdout
            # Simple parsing to extract key findings (can be improved)
            for line in process.stdout.splitlines():
                if "|_" in line or "VULNERABLE" in line:
                    results["findings"].append(line.strip())
        else:
            error_message = process.stderr.strip()
            results["error"] = error_message
            logger.error(f"Nmap scan failed: {error_message}")

    except FileNotFoundError:
        error_message = "Nmap is not installed or not in the system's PATH."
        results["error"] = error_message
        logger.error(error_message)
    except subprocess.TimeoutExpired:
        error_message = "Nmap scan timed out after 10 minutes."
        results["error"] = error_message
        logger.error(error_message)
    except Exception as e:
        error_message = f"An unexpected error occurred: {str(e)}"
        results["error"] = error_message
        logger.exception(error_message)

    logger.info(f"Vulnerability scan for {ip_address} completed.")
    return results
