"""
Exploit Agent - Vulnerability exploitation specialist
"""

from ..base_agent import BaseAgent, AgentThought, AgentAction
from typing import Dict, Any

class ExploitAgent(BaseAgent):
    """
    Exploitation specialist that identifies and exploits vulnerabilities.
    """
    
    def __init__(self):
        super().__init__(
            name="Exploit",
            description="Vulnerability exploitation specialist",
            tools=[
                "metasploit", "sqlmap", "nuclei", "ffuf",
                "hydra", "nikto", "wpscan", "xsstrike"
            ]
        )
        
    def think(self, context: Dict[str, Any]) -> AgentThought:
        """Analyze vulnerabilities and plan exploitation"""
        
        vulnerabilities = context.get('vulnerabilities', [])
        target_info = context.get('target_info', {})
        target = context.get('target', 'Unknown')
        
        if not vulnerabilities:
            # If no vulnerabilities provided, plan vulnerability scanning
            analysis = f"""
Target: {target}
No vulnerabilities identified yet.

Vulnerability Assessment Strategy:
1. Web vulnerability scanning (nuclei)
2. SQL injection testing (sqlmap)
3. Directory brute forcing (ffuf)
4. Common vulnerability checks (nikto)

Priority: Start with automated scanning using nuclei
"""
            plan = "Scan for vulnerabilities using nuclei templates"
        else:
            # If vulnerabilities are known, plan exploitation
            analysis = f"""
Target: {target}
Identified Vulnerabilities: {len(vulnerabilities)}

Exploitation Strategy:
1. Prioritize by severity and exploitability
2. Test proof-of-concept exploits
3. Document successful exploits
4. Assess impact and access gained

First target: {vulnerabilities[0] if vulnerabilities else 'Unknown'}
"""
            plan = f"Attempt exploitation of {vulnerabilities[0] if vulnerabilities else 'identified vulnerability'}"
        
        return AgentThought(
            observation=f"Analyzing target: {target}",
            analysis=analysis,
            plan=plan,
            confidence=0.75
        )
    
    def act(self, thought: AgentThought) -> AgentAction:
        """Execute exploitation or scanning"""
        
        # For demo, start with vulnerability scanning
        return AgentAction(
            tool="nuclei",
            parameters={
                "target": thought.observation.split(":")[1].strip(),
                "templates": ["cves", "vulnerabilities", "exposures"],
                "severity": ["critical", "high", "medium"]
            },
            reasoning="Scanning for known vulnerabilities using nuclei templates",
            expected_outcome="List of identified vulnerabilities with severity ratings"
        )
