"""
Exploit Agent - Vulnerability exploitation specialist
"""

from ..base_agent import BaseAgent, AgentThought, AgentAction
from typing import Dict, Any

class ExploitAgent(BaseAgent):
    """
    Exploitation specialist that identifies and exploits vulnerabilities.
    """
    
    def __init__(self):
        super().__init__(
            name="Exploit",
            description="Vulnerability exploitation specialist",
            tools=[
                "metasploit", "sqlmap", "nuclei", "ffuf",
                "hydra", "nikto", "wpscan", "xsstrike"
            ]
        )
        
    def think(self, context: Dict[str, Any]) -> AgentThought:
        """Analyze vulnerabilities and plan exploitation"""
        
        vulnerabilities = context.get('vulnerabilities', [])
        target_info = context.get('target_info', {})
        target = context.get('target', 'Unknown')
        
        # Use AI reasoning if available
        if self.use_ai:
            if not vulnerabilities:
                prompt = f"""You are a vulnerability assessment specialist.

Target: {target}
No vulnerabilities identified yet.

Available Tools:
- nuclei: Template-based vulnerability scanner with CVE database
- sqlmap: SQL injection detection and exploitation
- ffuf: Fast web fuzzer for directory/file discovery
- nikto: Web server scanner for common vulnerabilities
- wpscan: WordPress vulnerability scanner
- xsstrike: XSS detection suite

Create a vulnerability assessment strategy:
1. What types of vulnerabilities to test for first?
2. Which tools to use in what order?
3. What scan intensity (aggressive vs stealth)?
4. What are the priorities (SQL injection, XSS, misconfigurations)?
5. How to verify findings?

Provide a detailed vulnerability assessment plan in 3-4 paragraphs."""
            else:
                prompt = f"""You are an exploitation specialist.

Target: {target}
Identified Vulnerabilities: {vulnerabilities}

Available Tools:
- metasploit: Exploitation framework with exploits database
- sqlmap: Automated SQL injection exploitation
- Exploit-DB: Public exploit database

Analyze these vulnerabilities and create an exploitation strategy:
1. Prioritize by severity and exploitability
2. Which vulnerabilities to exploit first?
3. What proof-of-concept approach?
4. What data to extract or access to gain?
5. What are the risks and detection concerns?

Provide a strategic exploitation plan in 3-4 paragraphs."""

            analysis = self._call_llm(prompt)
            plan = "Scan for vulnerabilities using nuclei templates" if not vulnerabilities else f"Attempt exploitation of identified vulnerabilities"
        else:
            # Fallback to rule-based
            if not vulnerabilities:
                analysis = f"""
Target: {target}
No vulnerabilities identified yet.

Vulnerability Assessment Strategy:
1. Web vulnerability scanning (nuclei)
2. SQL injection testing (sqlmap)
3. Directory brute forcing (ffuf)
4. Common vulnerability checks (nikto)

Priority: Start with automated scanning using nuclei
"""
                plan = "Scan for vulnerabilities using nuclei templates"
            else:
                analysis = f"""
Target: {target}
Identified Vulnerabilities: {len(vulnerabilities)}

Exploitation Strategy:
1. Prioritize by severity and exploitability
2. Test proof-of-concept exploits
3. Document successful exploits
4. Assess impact and access gained

First target: {vulnerabilities[0] if vulnerabilities else 'Unknown'}
"""
                plan = f"Attempt exploitation of {vulnerabilities[0] if vulnerabilities else 'identified vulnerability'}"
        
        return AgentThought(
            observation=f"Analyzing target: {target}",
            analysis=analysis,
            plan=plan,
            confidence=0.75
        )
    
    def act(self, thought: AgentThought) -> AgentAction:
        """Execute exploitation or scanning"""
        
        # For demo, start with vulnerability scanning
        return AgentAction(
            tool="nuclei",
            parameters={
                "target": thought.observation.split(":")[1].strip(),
                "templates": ["cves", "vulnerabilities", "exposures"],
                "severity": ["critical", "high", "medium"]
            },
            reasoning="Scanning for known vulnerabilities using nuclei templates",
            expected_outcome="List of identified vulnerabilities with severity ratings"
        )
